> Production To Do:
  > install circus and set up crawler
  > firewall
  > start cleaning up gulp file and make a python distribution setup.py
  > improve usage of gulp to have packages installed via npm

> Development To Do:
  > set up gulp: jshint, sourcemaps
  > set up Python Linter
  > start using unittests
    > write a unit test and make travis-ci run tests on commit, 404 or 400 invalid
      > https://flask-webtest.readthedocs.org/en/latest/
  > add a githook that runs flake8 before commits

> To Do List:
  > make post on League Reddit, League Group UW about new update

  > need to fix production server! it is on a different track than the master
    branch. settings.py, package.json, and app_settings.py are all different
    files.
    > .gitignore those files and remove them from the repository.
    > store .py.default files instead and rename them in the deployment
      > app_settings debug is false.
      > settings has database changed.
      > package.json ????

  > after linting all the code, add docstrings for everything
    > http://sphinxcontrib-napoleon.readthedocs.org/en/latest/example_google.html
    > echo "flake8" >> .git/hooks/pre-commit

  > make sure all get_matches are moved to get_match_list

  > catch exceptions for player analysis

  > error handling with front side
    > send error codes, etc.
      > user doesn't exist
      > Riot didn't give a valid response

  > deep clean app.py, riot.py
    > find better way to fix errors in riot.py

  > start switching over to logging from printing
    > implement PrettyLog in all places

  > switch over to using the riot sessions for models.py

  > improve champ detail loading times (the query)
    > fix champion detail pick rate. should be relative not absolute.
      > group by date and zip the counts.

  > improve calculation of counters/assists with large databases

  > change links in footer to relative links and resolved links with ng-link {{ component }}
    > linking without the #?

  > hierarchy for championList and About and Version History to avoid redundancy w/ templating
    > angular-blocks

  > use cached for the other views

  > improve quick info page
    > champion icons fade into overlay of score on hover
    > featured champions, rising new stars, and random suggested champs

  > add names to adjustments/analyze
    > maybe change adjustment counters/assists to run afterwards?

  > role calculations in getting the champion data for a player (app.py)? see TODO

  > find a way to make use of items and banned champions

  > make a section for "champions this champion is good against"
    > aka who does this champion counter

  > auto load more champions as you scroll down

  > start using pylinter

  > use better calls for sqlalchemy
    > .update()

  > make production workflow more efficient
    > travis-ci and rsync the build from a build server
      > fabric or node plugins
    > or build locally
      > rsync -r ./dist/ MYSERVER:/var/www/
    > or use a gulp rsync
      > https://www.npmjs.com/package/gulp-rsync
    > or use a staging server. upload to a git repo when knowing it works.
      > "POINT staging.choosemychampion.net TO YOUR SAME SERVER"
        "AND SET THE HOSTNAME OF A SEPARATE SITE AS THAT RSYNC TO THAT SETUP FIRST"

  > clean up git directory on gitlab

  > start cleaning up planofaction.txt and directory of files
    > delete files that aren't used anymore

  > comment on all new code

  > fix front page player count to accurate

  > fix models.py and clean it up and add abstract riot API
    > improve the calculated win rate to actually include personal data

  > add personal analysis for a particular champion
    > tips to improve play, looks at recent matches with the champion
    > also include the champion analysis in the details part to server side
      > make discussion paragraphs more complex with a lot more configurations

  > improve compilation of the data in the app.py by abstraction

  > implement league in the database
    > consider some champions may be better in certain leagues

  > improve the crawler by having different starting points

  > FIX PARENTING!
    > making it relative makes it easily broken due to ng

  > add more factors into champion win rates
    > change adjustment and expected win rate to favor played champions, a lot more. A LOT MORE.
    > factors to consider:
      > wins under 20 minutes? damage? meta? cs numbers? economy of items?

  > set up database backups

  > memcached? (https://docs.webfaction.com/software/memcached.html)

  > implement settings: other season data and normal games, color theme?

  > set up suggestions/bugs form

  > go through todos in the code
