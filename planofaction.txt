Project #2: League Champion Suggestion System (LCSS) LEL
  > Technologies to use: Flask (maybe Django), Ember, Foundations, SASS (gulp.js)
                         SQL Alchemy?, Colorama hehe, Statistics, Scipy
  > The page takes a user name, their role (top lane, mid lane...),
    and maybe what role they are trying to fill (optional)?
    > They are given a main champion and the ranking of the champion
      supported with win rate data, their win rate data, and the ranking
      of the champion. Link to guides? Affiliate links?
  > How does this work?
    > WORKING database would be updated twice weekly...
      > These would be updated with win rates of particular champions
        in solo queue, also in particular roles.
      > Would have to integrate what role they're trying to fill and
        the current team status? What their team needs? This would be good
        to know because they might need a tank...?
    > Algorithim would take the working database (updated nightly)
      > The algorithim would then update the current RANKINGS of
        particular champions based on win rates and also multiple other
        sources from things such as nerfplz.com, or other tier lists.
      > The champions would be put into point rankings for particular
        listings such as top lane, mid lane, bottom lane...
      > Maybe the person can just put in their name? Top lane, bottom lane
        etc would be put into different tabs?
    > The person's data can be gathered from multiple sources...
      > League's servers, LOLKing, or op.gg
        > Avoid overloading League's servers and would have to
          aggregate own data and make ranking of each champion
          for that particular person...
        > LolKing would give aggregated data and op.gg too.....
      > After the person's data is gathered (maybe stored in database?)
        > They are deleted every week if not updated?
        > Their rankings are then put into each ranking individually. These
          would simply update the point rankings of singular champions
          to allow more customized data.
    > Updated data flow: Weekly request night -> .py file that runs this in console
      -> gets champion data from League (maybe 1000 seed matches) -> aggregates
      data and puts point values to champions in certain roles -> crawls web for
      opinions and FOTMS and champions that might be good maybe some input crawler
      for nerfplz.com -> generates a table of champion, and top lane, mid lane and
      bottom lane values -> user request -> generate user champion table and adjust
      values in the database after retrieved -> give data back
    > Champion -> Meta (could be multiple) -> Their Point Value
      > Factors for consideration:
        ban rate (good), win rate (good), pick rate (medium, could be not good to play
        if everyone plays the champion so they know how to pick against, maybe look
        at top counter picks?)
    > Crawling
      > Go to featured game, go 10 players deep, then take another featured game
        then go ten players deep, to 100,000 players
      > Go to featured game and then increment match to go to a solo queue game
        then go from there. (/observer-mode/rest/featured)
    > from time import sleep
    > Counter picking, team composition
    > later, the data can be used to analyze a person's play style in ranked and how
      they can become better. like what role are they playing? is their CS good at certain
      times? what about their K/d/A? etc.....
  > Display of the page
    > Silvery overlay of champion splash arts? Glass over the
      art and maybe dark black League page for actual input.
      Maybe look at the League pages, such as the League Fantasy
      or maybe surr at 20 site.
    > Gold trims? Good custom backgrounds? White page on glassy? Look at
      dribbble and saved photos and favorited photos. Good UI to look at.
    > Customize Foundations before using it!

Testing:
  > a956dacd-09ed-49d2-a610-dc9597599af3
  > curl --request GET 'https://na.api.pvp.net/api/lol/na/v1.4/summoner/by-name/RiotSchmick?api_key=$APIkey' --include
  > curl --request GET 'https://na.api.pvp.net/observer-mode/rest/featured?api_key=$APIkey' --include
  > curl --request GET 'https://na.api.pvp.net/api/lol/na/v2.2/match/1769073754/?api_key=$APIkey' --include

  1769073753
https://na.api.pvp.net/observer-mode/rest/featured?api_key=a956dacd-09ed-49d2-a610-dc9597599af3

get_match_data = requests.get(URLS['match'] + str(1769073753), params = {'api_key': API_KEY})

API_KEY = "a956dacd-09ed-49d2-a610-dc9597599af3"
get_player_data = requests.get("https://na.api.pvp.net/api/lol/na/v1.3/stats/by-summoner/21887220/ranked", params = {'api_key': API_KEY})


Work flow: crawler.py -> analyze.py -> adjustment.py

> / -> /username/ -> /username/top/ /username/mid/ -> /username/top/Akali/ (expanded)
> maybe in list format. when they request lists come up with top mid jungle, etc...
> then more nested lists.

> / has a form where the user inputs their username
> it transitionsTo or link-to the URL corresponding to their username

> /username/ then sets its model or uses some type of EmberData to get their information from
> the server at /username/. somehow i need to tell the difference between an AJAX request
> and their /username/ that they want originally. or maybe just /api/username/

> now their browser has all the data they need so they can navigate between
> the top lane, mid lane, and the champion names.


> todo at the moment: go through all the todos. (for later) github this. (fixed) implement all the
> "minificiation" techniques and clean up all code! (fixed) use dependency downloaders
> such as bower and stuff! (for later)

> lightweight analytics? FAVICON! (done) compress CSS and JS ensure cache management
> is correct and fine. (?)

> cool data visualization with lots of champion data and interactive data? (for later)

> need to encode the username! usernames with spaces are not working! (fixed) fix the email link?
> maybe make it a more private email? (fixed)

> settings files and decomposing some extra code.
